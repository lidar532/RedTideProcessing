# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_HABSpec_data_class.ipynb.

# %% auto 0
__all__ = ['HABSPEC_CAL_DATA', 'HAB_Spectra', 'w_to_pixel', 'pixel_to_w', 'w_range_pixels']

# %% ../nbs/00_HABSpec_data_class.ipynb 4
import datetime   as dt
import numpy      as np
import time

# %% ../nbs/00_HABSpec_data_class.ipynb 8
class HABSPEC_CAL_DATA:
  '''
  HABSpec Calibration data class.  This class contains the data necessary to
  calibrate the HABSpec sensor for wavelength, radiance, and dark current.
  '''
  def __init__(self):
    self.create_date          = dt.datetime.utcnow()  # When this class was create.
    self.Notes                = None                  # User entered notes about this calibration.
    self.dark_cal_path        = None                  # Path to HABSpec spectra collection used to generate dark cal data.
    self.solar_cal_fn         = None                  # Filename of any solar calibration spectra used.
    self.cfl_cal_fn           = None                  # Filename of any CFL bulb calibration spectra used.
    self.radiance_cal_path    = None                  # Path to HABSpec spectra collection used to generate radiance cals.
    self.radiance_cal_src_fn  = None                  # Path to radiance source file ( QTH bulb spectra ).
    self.pixel0               = None                  #
    self.pixel1               = None                  #
    self.wavelength0          = None                  #
    self.wavelength1          = None                  # 
    self.scale = {
          # Exp    Scale
              1 : [None],
              2 : [None],
              3 : [None],
              4 : [None],
              6 : [None],
              7 : [None],
              8 : [None],
              9 : [None],
             10 : [None],
             15 : [None],
             20 : [None],
             25 : [None],
             30 : [None],
             35 : [None],
             50 : [None],
             75 : [None],
            100 : [None],
            150 : [None],
            200 : [None],
            250 : [None],
            300 : [None],
            350 : [None],
            400 : [None],
            500 : [None],
            750 : [None],
           1000 : [None]
    }
    self.dark = {                                      # 
          # Exp    Dark
              1 : [None],
              2 : [None],
              3 : [None],
              4 : [None],
              6 : [None],
              7 : [None],
              8 : [None],
              9 : [None],
             10 : [None],
             15 : [None],
             20 : [None],
             25 : [None],
             30 : [None],
             35 : [None],
             50 : [None],
             75 : [None],
            100 : [None],
            150 : [None],
            200 : [None],
            250 : [None],
            300 : [None],
            350 : [None],
            400 : [None],
            500 : [None],
            750 : [None],
           1000 : [None]
           }

  def __str__(self):
    rv = ''
    for k in self.__dict__.keys():
      rv += f'{k:20s}: {self.__dict__[k]}\n'
    return rv

# %% ../nbs/00_HABSpec_data_class.ipynb 13
class HAB_Spectra:
  '''
  '''
  Configured  = False                       # Gets set true when first legit spectra is read.
  Calibrated_w= False                       # Gets set True when calibrated for wavelength
  Xpixels     = np.arange( 10 )             # Pixel number array. Gets loaded when a spectra is configured. Ultimately 1280 points.
  wavelengths = np.arange( 10 )             # Wavelength array. Gets loaded when a spectra is configured. Ultimately 1280 points.
  create_time = dt.datetime.utcnow()        # 
  pixel0      = None                        # Lowest spectral pixel number. Filled in when calibrated for wavelength.
  wavelength0 = None                        # Lowest spectral wavelength. Filled in when calibrated for wavelength.
  pixel1      = None                        # Highest spectral pixel number. Filled in when calibrated for wavelength.
  wavelength1 = None                        # Highest spectral wavelength. Filled in when calibrated for wavelength.
  def __init__(self ) -> object:
    self.json_spectra_file_name    = None   # The filename of JSON spectra file.
    self.Lat          = None                # GPS latitude.  GPS data only present after 2022-12.
    self.Lon          = None                # GPS longitude.
    self.altitde_m    = None                # GPS altitude in meters.
    self.n_saturated  = None                # number of saturated pixels in the orginal image.
    self.raw_y_min    = None                # The minimum value of of the summed up intensity values.
    self.remove_bias  = None                # True if y_raw has bad raw_y_min subtracted.
    self.y_average    = None                # User set, True if raw_y values are average vs summed up.
    
    self.DateTime     = None                # Unix datetime value.  Only present after 2022-12.
    self.Exposure     = None                # Sensor spectra exposure time in miliseconds. Only after 2022-12.
    
    self.raw_y        = np.arange( 10 )     # Summed up Intensity values. 
    self.summed_rows  = 0                   # Number of summed up pixels per spectra pixel.
    
  def __str__(self):
    '''
    '''
    rv = ''
    rv = f'{self.Calibrated_w=}\n'
    rv+= f'{self.Xpixels=}\n'
    rv+= f'{self.wavelengths=}\n'
    rv+= f'{self.create_time=}\n'
    rv+= f'{self.pixel0=}\n'
    rv+= f'{self.wavelength0=}\n'
    rv+= f'{self.pixel1=}\n'
    rv+= f'{self.wavelength1=}\n'
    for k in self.__dict__.keys():
      rv += f'{k:20s}: {self.__dict__[k]}\n'
    return rv
    

# %% ../nbs/00_HABSpec_data_class.ipynb 19
def w_to_pixel(
  hab_spectra_class,   # The HAB_Spectra class.
  w,                   # The wavelength you want the pixel number of.
  debug=False          # Set to True to print internals.
) -> int:              # The pixel
  '''
  Return the pixel index for a given wavelength `w`.  Out of range
  wavelengths cause -1 to be returned.
  '''
  x = hab_spectra_class.wavelengths
  dw  = (x[-1] - x[0])
  dpx = len(x)
  d  = dw/dpx
  px = int((w-x[0]) / d )
  if px < 0: 
    px = -1
  elif w > x[-1]:
    px = -1
    
  if debug:
    print(f'debug. w_to_pixel(). {x=}, {dw=}, {dpx=}, {d=}, {px=}' )

  return px

# %% ../nbs/00_HABSpec_data_class.ipynb 21
def pixel_to_w(
  hab_spectra_class,  # The HAB_Spectra class.
  #x,                 # Array of wavlengths if the sensor.
  pix,                # Pixel number to convert to wavelength.
) -> float:           # The wavelength of the pixel.
  '''
  Return the wavelength of a given pixel index.
  Out of range wavelengths cause -1 to be returned.
  '''
  x = hab_spectra_class.wavelengths
  dw  = (x[-1] - x[0])
  dpx = len(x)
  d  = dw/dpx
  w = px*d + x[0]
  if w < x[0]:
    w = -1.0
  elif w > x[-1]:
    w = -1.0
  return w

# %% ../nbs/00_HABSpec_data_class.ipynb 25
def w_range_pixels( 
  hab_spectra_class,  # The HAB_Spectra class.
  #x,        # A numpy array of wavlengths for each pixel.
  a,        # Starting wavelength.
  b         # Ending wavelength.
) -> list:  # List of pixels cooresponding to `a`:`b` wavelengths.
    '''
    Returns a pixel index list of all pixels between wavelength 'a' and 'b'. 
    '''
    x = hab_spectra_class.wavelengths
    rv = np.where(np.logical_and( x>=a, x<=b) )
    return rv
