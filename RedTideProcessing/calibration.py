# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/07_Calibration.ipynb.

# %% auto 0
__all__ = ['cal_verify']

# %% ../nbs/07_Calibration.ipynb 11
import getpass
import gzip
import numpy                                as np
import os
import datetime                             as dt
import pickle
import socket
import time

# %% ../nbs/07_Calibration.ipynb 12
import RedTideProcessing.habspec_data_class as hsdc
import RedTideProcessing.habspec            as habspec
import RedTideProcessing.wavelength_cal     as cal
import RedTideProcessing.testing            as testing
import RedTideProcessing.radiance_cal       as rad_cal

# %% ../nbs/07_Calibration.ipynb 101
def cal_verify( 
  cal           # Calibration data class.
) -> tuple:     # ( bool, list )
  '''
  Checks a calibration data class for missing items. Returns a tuple where the first
  element is either True or False, True returned if nothing missing, and False if there is a problem.
  The second element is a list of issues found with the cal object.
  '''
  rv = 0
  issue_list = []
  
  # Check for missing elements.
  for k in cal_data.__dict__.keys():
    if cal_data.__dict__[k] == None:
      issue_list.append(f'Error. {k} has no value')
      rv = (False, issue_list)
  
  # Get number of dark values
  dark_count = len(cal.__dict__['dark'])
  
  # Get number of scale values
  scale_count = len(cal.__dict__['scale'])
  
  # Check to make sure each scale factor exposure also has a dark value.
  dark = cal.__dict__['dark']
  for v in cal.__dict__['scale']:
    v = int(v)
    if v not in dark.keys():
      issue_list.append(f"Error. No dark value for exposure: {v} ")
      rv = (False, issue_list )
    #print(v, (v in dark.keys()) )
  
  if dark_count != scale_count:
    issue_list.append(f"Warning. Scale and Dark count mismatch. {scale_count} scale values and {dark_count} values found.")
    rv = (False, issue_list )
  
  return rv
