# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/20_Sentinel.ipynb.

# %% auto 0
__all__ = ['sentinal_s2a', 'OLCI_Bands', 'Sentinal_Band', 'sentinel_update']

# %% ../nbs/20_Sentinel.ipynb 3
import numpy as np

# %% ../nbs/20_Sentinel.ipynb 5
import RedTideProcessing.habspec_data_class as hsdc

# %% ../nbs/20_Sentinel.ipynb 7
sentinal_s2a = {
# Band
#         Center
#                Width
  'b1' : [ 442.7, 20 ],
  'b2' : [ 492.7, 65 ],
  'b3' : [ 559.8, 35 ],
  'b4' : [ 664.6, 30 ],
  'b8' : [ 832.8, 105],
  
  'b5' : [ 704.1, 14 ],
  'b6' : [ 740.5, 14 ],
  'b7' : [ 782.8, 19 ],
  '8a' : [ 864.7, 21 ],
}

# %% ../nbs/20_Sentinel.ipynb 9
OLCI_Bands = {
# From: https://ladsweb.modaps.eosdis.nasa.gov/missions-and-measurements/olci/
# and: https://sentinels.copernicus.eu/web/sentinel/user-guides/sentinel-3-olci/overview/heritage
# Band
#         Center
#                Width
  'Oa1'  : [ 400.00, 15,  'Aerosol correction, improved water constituent retrieval' ],
  'Oa2'  : [ 412.50, 10,  'Yellow substance and detrital pigments (Turbidity).' ],
  'Oa3'  : [ 442.50, 10,  'Chl absorption max biogeochemistry, vegetation' ],
  'Oa4'  : [ 490.00, 10,  'High Chl, other pigments' ],
  'Oa5'  : [ 510.00, 10,  'Chl, sediment, turbidity, red tide.' ],
  'Oa6'  : [ 560.00, 10,  'Chlorophyll reference (Chl minimum)' ],
  'Oa7'  : [ 620.00, 10,  'Sediment loading' ],
  'Oa8'  : [ 665.00, 10,  'Chl (2nd Chl abs. max.), sediment, yellow substance/vegetation' ],
  'Oa9'  : [ 673.75, 7.5, 'For improved fluorescence retrieval and to better account for smile together with the bands 665 and 680 nm' ],
  'Oa10' : [ 681.25, 7.5, 'Chl fluorescence peak, red edge' ],
  'Oa11' : [ 708.75, 10,  'Chl fluorescence baseline, red edge transition.' ],
  'Oa12' : [ 753.75, 7.5, 'O2 absorption/clouds<comma> vegetation' ],
  'Oa13' : [ 761.25 ,2.5, 'O2 absorption band/aerosol corr.' ],
  'Oa14' : [ 764.38 ,3.75,'Atmospheric correction' ],
  'Oa15' : [ 767.50 ,2.5, 'O2A used for cloud top pressure, fluorescence over land.' ],
  'Oa16' : [ 778.75 ,15,  'Atmos. corr./aerosol corr.' ],
  'Oa17' : [ 865.00 ,20 , 'Atmos. corr./aclean word to html convertererosol corr., clouds, pixel co-registration.' ],
  'Oa18' : [ 885.00 ,10 , 'Water vapour absorption reference band. Common reference band with SLST instrument. Vegetation monitoring.' ],
  'Oa19' : [ 900.00 ,10 , 'Water vapour absorption/vegetation monitoring (max. reflectance)'],
  'Oa20' : [ 940.00 ,20 , 'Water vapour absorption, atmos./aerosol corr.'],
  'Oa21' : [ 1020.00,40 , 'Atmos./aerosol corr.'],
}



# %% ../nbs/20_Sentinel.ipynb 12
class Sentinal_Band:
  '''
  Defines a single Sentinel band data object. 
  See: https://sentinels.copernicus.eu/web/sentinel/user-guides/sentinel-2-msi/resolutions/spectral
  '''
  header = f'band center_nm width_nm color w_low px_low w_high px_high '
  average = True
  mean    = False
  
  def __init__(self,
               hab_spec_class,
               name:str,        # The Sentinel official wavelength-band name.
               center_nm:float, # Center wavelength in nanometers.
               width_nm:float,  # Bandwidth in nanometers.
               color:str        # Desired color to use for any plots, or graphics.
              ) -> object:      # Class object returned.
    #self.x = hab_spec_class.wavelengths
    self.name      = name
    self.center_nm = center_nm
    self.width_nm  = width_nm
    self.color     = color
    self.w_low     = center_nm - width_nm/2
    self.w_high    = center_nm + width_nm/2
    self.px_low    = hsdc.w_to_pixel( hab_spec_class,  self.w_low )
    self.px_high   = hsdc.w_to_pixel( hab_spec_class,  self.w_high )
    self.pixels    = hsdc.w_range_pixels(hab_spec_class, self.w_low,self.w_high)
    self.y_mean    = 0.0        # This gets updated.
  
  def __str__(self):
    return f'{self.name}      {self.center_nm:6.2f}   {self.width_nm:6.1f}  {self.color}'\
           f'{self.w_low:6.1f}   {self.px_low:4d} {self.w_high:6.1f}    {self.px_high:4d}'
  
  def compute_stats(self, 
                  hab_spectra_class     # Spectra to update y_mean from.
                 ) -> None:   # The stat values are updated in the class.
    '''
    Compute the Sentinel band stats for a given spectra if enabled. To enable or
    disable set Sentinel_Band.average = True | False, or Sentinel_Band.mean = True | False.
    '''
    if self.mean:
      self.y_mean    = hab_spectra_class.raw_y[ self.pixels ].mean()
    else:
      self.y_mean = 0.0
      
    if self.average:
      self.y_average = np.average( hab_spectra_class.raw_y[ self.pixels ] )
    else:
      self.y_average = 0.0

# %% ../nbs/20_Sentinel.ipynb 14
def sentinel_update( 
  hab_spectra_class, # Spectra to compute Sentinel band averages on.
  sentinel_bands     # Array of sentinel band classes.       
) -> None:           # sentinel_bands will contain .y_mean afterward.
  '''
  '''
  for s in sentinel_bands:
    sentinel_bands[ s ].compute_stats( hab_spectra_class )
