[
  {
    "objectID": "hab_process.html",
    "href": "hab_process.html",
    "title": "Colabs Online Processing for HABSpec",
    "section": "",
    "text": "#@title Copy and untar to 2021-0717 NO-PIX data from the Gdrive to /content { form-width: \"30%\" }\nif __name__ == '__main__':\n  ! cp /content/drive/MyDrive/Missions/2021-0717-HAB-pie-NO-PIX.tar.gz /content/\n  ! tar -xzf /content/drive/MyDrive/Missions/2021-0717-HAB-pie-NO-PIX.tar.gz\n  print('Operation completed.')"
  },
  {
    "objectID": "hab_process.html#gps-plots-maps",
    "href": "hab_process.html#gps-plots-maps",
    "title": "Colabs Online Processing for HABSpec",
    "section": "GPS Plots, Maps",
    "text": "GPS Plots, Maps\n\n#@title Show just the GPS Track on a map { form-width: \"30%\" }\nif __name__ == '__main__':\n  Gps_File_Name = \"/content/drive/MyDrive/Missions/2021-1208-HAB-Lake-Parker/2021-1208/all-gps.txt\" #@param {type:\"string\"}\n  mp = \"ESRI Imagery\" #@param [\"ESRI Imagery\", \"Open Street Maps\", \"WorldMap\" ]\n  Track_Color = \"white\" #@param [\"red\", \"green\", \"blue\", \"black\", \"white\", \"gray\", \"lightgray\", \"darkgray\"]\n  Point_Size = 2.0 #@param [\".1\", \".25\", \".5\", \".75\", \"1.0\", \"1.5\", \"2.0\", \"3.0\", \"5.0\", \"10\", \"20\"] {type:\"raw\"}\n \n\n  import pandas as pd\n  from pathlib import Path\n\n  if not Path('/usr/local/bin/pyproj').is_file():\n    !pip install pyproj\n  import bokeh.io\n  bokeh.io.output_notebook()\n  import bokeh.plotting\n  from bokeh.plotting import figure\n  from bokeh.io import output_notebook, show\n  from bokeh.tile_providers import get_provider, WIKIMEDIA, CARTODBPOSITRON, STAMEN_TERRAIN, STAMEN_TONER, ESRI_IMAGERY, OSM\n  from pyproj import Proj, transform\n\n  import warnings\n  warnings.filterwarnings(\"ignore\")\n\n  TOOLS = \"pan,wheel_zoom,box_zoom,reset, save, undo, redo, hover\"\n  TOOLTIPS = [\n      (\"index\", \"$index\")  #,\n      #(\"(x,y)\", \"($x, $y)\"),\n      #(\"desc\", \"@desc\"),\n  ]\n\n  # Create a spectra obj. Functions to read the gps data files are in this class.\n  if not 'HyperSpec' in dir():\n    print(\"Can't find the HyperSpec class.  You need to run the Cell above: 'Load all local defs.'\")\n  else:\n    hs = HyperSpec()\n    gps_df = hs.read_gps_file_to_df(Gps_File_Name)\n    screenProj = Proj(init='epsg:3857')     # \n    wgs84Proj = Proj(init='epsg:4326')    # WGS-84\n\n    map_border = .1\n    lat_min = gps_df['Lat'].min() - map_border\n    lat_max = gps_df['Lat'].max() + map_border\n    lon_min = gps_df['Lon'].min() - map_border\n    lon_max = gps_df['Lon'].max() + map_border\n    # print( lat_max, lat_min, lon_max,lon_min)\n\n    world_lon1, world_lat1 = transform(wgs84Proj,screenProj,lon_min,lat_max)\n    world_lon2, world_lat2 = transform(wgs84Proj,screenProj,lon_max,lat_min)\n\n    if 'gps_df' not in globals():\n      print('\\nNo gps_df dataframe is present.  You need to process some data to create a \"gps_df\" variable.')\n    else:\n      gps_lats, gps_lons = transform(wgs84Proj, screenProj, gps_df['Lon'], gps_df['Lat'])\n\n      #cartodb = get_provider(CARTODBPOSITRON)\n      if mp == \"ESRI Imagery\":\n        cartodb = get_provider(ESRI_IMAGERY)\n      elif mp == \"WikiMedia\":\n        cartodb = get_provider(WIKIMEDIA)\n      elif mp == \"WorldMap\":\n        cartodb = get_provider(CARTODBPOSITRON)\n      elif mp == \"Open Street Maps\":\n        cartodb = get_provider(OSM)\n      elif mp == \"STAMEN_TERRAIN\":\n        cartodb = STAMEN_TERRAIN\n\n      fig = figure(title=Gps_File_Name,\n                  plot_width=800, plot_height=800,\n                  tooltips=TOOLTIPS, tools=TOOLS,\n                  x_range=(world_lon1, world_lon2),\n                  y_range=(world_lat1, world_lat2),\n                  x_axis_type=\"mercator\", y_axis_type=\"mercator\",\n                  output_backend=\"webgl\"\n                  )\n\n\n      fig.add_tile(cartodb)\n      fig.circle( y=gps_lons, x=gps_lats, size=Point_Size, color=Track_Color )\n      show(fig)\n\n\n#@title Show the GPS Track on a map with data results. { form-width: \"30%\" }\nif __name__ == '__main__':\n  Gps_File_Name = \"/content/drive/MyDrive/Missions/2021-1208-HAB-Lake-Parker/2021-1208/all-gps.txt\" #@param {type:\"string\"}\n  mp = \"ESRI Imagery\" #@param [\"ESRI Imagery\", \"Open Street Maps\", \"WorldMap\" ]\n  Track_Color = \"red\" #@param [\"red\", \"green\", \"blue\", \"black\", \"white\", \"gray\", \"lightgray\", \"darkgray\"]\n  Point_Size = .1 #@param [\".1\", \".25\", \".5\", \".75\", \"1.0\", \"1.5\", \"2.0\", \"3.0\", \"5.0\", \"10\", \"20\"] {type:\"raw\"}\n  Fl_Scale =  .3#@param {type:\"number\"}\n  Show_Index = True #@param [\"True\", \"False\"] {type:\"raw\"}\n\n\n  import pandas as pd\n  from pathlib import Path\n\n  if not Path('/usr/local/bin/pyproj').is_file():\n    !pip install pyproj\n  import bokeh.io\n  bokeh.io.output_notebook()\n  import bokeh.plotting\n  from bokeh.plotting import figure\n  from bokeh.io import output_notebook, show\n  from bokeh.tile_providers import get_provider, WIKIMEDIA, CARTODBPOSITRON, STAMEN_TERRAIN, STAMEN_TONER, ESRI_IMAGERY, OSM\n  from pyproj import Proj, transform\n\n  import warnings\n  warnings.filterwarnings(\"ignore\")\n\n  TOOLS = \"pan,wheel_zoom,box_zoom,reset, save, undo, redo, hover\"\n  TOOLTIPS = [\n      (\"index\", \"$index\")  #,\n      #(\"(x,y)\", \"($x, $y)\"),\n      #(\"desc\", \"@desc\"),\n  ]\n\n  # Create a spectra obj\n  if not 'HyperSpec' in dir():\n    print(\"Can't find the HyperSpec class.  You need to run the Cell above: 'Load all local defs.'\")\n  else:\n    hs = HyperSpec()\n    gps_df = hs.read_gps_file_to_df(Gps_File_Name)\n\n\n  screenProj = Proj(init='epsg:3857')     # \n  wgs84Proj = Proj(init='epsg:4326')    # WGS-84\n\n  map_border = .1\n  lat_min = gps_df['Lat'].min() - map_border\n  lat_max = gps_df['Lat'].max() + map_border\n  lon_min = gps_df['Lon'].min() - map_border\n  lon_max = gps_df['Lon'].max() + map_border\n  # print( lat_max, lat_min, lon_max,lon_min)\n\n  world_lon1, world_lat1 = transform(wgs84Proj,screenProj,lon_min,lat_max)\n  world_lon2, world_lat2 = transform(wgs84Proj,screenProj,lon_max,lat_min)\n\n  #gps_lats, gps_lons = transform(wgs84Proj, screenProj, gps_df['Lon'], gps_df['Lat'])\n  if 'spec_df' not in globals():\n    print('\\nNo spec_df dataframe is present.  You need to process some data to create a \"spec_df\" variable.')\n  else:\n    gps_lats, gps_lons = transform(wgs84Proj, screenProj, spec_df['Lon'], spec_df['Lat'])\n\n    #cartodb = get_provider(CARTODBPOSITRON)\n    if mp == \"ESRI Imagery\":\n      cartodb = get_provider(ESRI_IMAGERY)\n    elif mp == \"WikiMedia\":\n      cartodb = get_provider(WIKIMEDIA)\n    elif mp == \"WorldMap\":\n      cartodb = get_provider(CARTODBPOSITRON)\n    elif mp == \"Open Street Maps\":\n      cartodb = get_provider(OSM)\n    elif mp == \"STAMEN_TERRAIN\":\n      cartodb = STAMEN_TERRAIN\n\n    fig = figure(title=Gps_File_Name,\n                plot_width=800, plot_height=800,\n                tooltips=TOOLTIPS, tools=TOOLS,\n                x_range=(world_lon1, world_lon2),\n                y_range=(world_lat1, world_lat2),\n                x_axis_type=\"mercator\", y_axis_type=\"mercator\",\n                output_backend=\"webgl\"\n                )\n    from bokeh.models import Title\n    fig.add_layout( Title(text=f'Data Source: {Root_Data_Path}', align=\"center\"), \"below\")\n\n    fig.add_tile(cartodb)\n  \n    min_chl = spec_df['Chl_Fl'].min() + 0.001\n    min_700 = spec_df['fl_700'].min() + 0.001\n    if Show_Index:\n      fig.circle(y=gps_lons, x=gps_lats, legend_label=\"\", color='Yellow', size=4 )\n    fig.ray(y=gps_lons, x=gps_lats, length=(spec_df['fl_700']-min_700)*Fl_Scale, angle_units='deg', angle=-spec_df['Course'], \n            line_color='Orange', line_width=3, legend_label=\"700nm\")\n    fig.ray(y=gps_lons, x=gps_lats, length=(spec_df['Chl_Fl']-min_chl)*Fl_Scale, angle_units='deg', angle=-spec_df['Course']+180.0,\n            line_color='Red', line_width=3, legend_label=\"683nm\")\n\n    show(fig)"
  },
  {
    "objectID": "hab_process.html#plot-a-single-json-spectra-file-v2.",
    "href": "hab_process.html#plot-a-single-json-spectra-file-v2.",
    "title": "Colabs Online Processing for HABSpec",
    "section": "Plot a single json spectra file v2.",
    "text": "Plot a single json spectra file v2.\nSee Fraunhofer lines for absorption lines that can be used for wavelength calibration.\nAlso See: Strong Lines of Mercury ( Hg )\n\nPlot Settings.\n\n#@title Plot Spectra Settings { form-width: \"30%\", display-mode: \"form\"}\n\nif __name__ == '__main__':\n  Plot_Spectra_Settings = True    # used to indicate this cell has been run.\n  Spectra_Plot_Style = \"Lines\" #@param [\"Lines\", \"Lines & Points\", \"Points\"]\n  Point_Size = 5.0 #@param [\".1\", \".25\", \".5\", \".75\", \"1.0\", \"1.5\", \"2.0\", \"3.0\", \"5.0\"] {type:\"raw\"}\n  Line_Color  = \"blue\" #@param [\"red\", \"green\", \"blue\", \"black\", \"white\", \"gray\", \"lightgray\", \"darkgray\"]\n  Point_Color = \"green\" #@param [\"red\", \"green\", \"blue\", \"black\", \"white\", \"gray\", \"lightgray\", \"darkgray\"]\n  X_Axis = \"Wavelength (nm)\" #@param [\"Wavelength (nm)\", \"Pixels\"]\n  Remove_Bias = True #@param [\"True\", \"False\"] {type:\"raw\"}\n  Y_Axis = \"Average\" #@param [\"Average\", \"Sum Total\"]\n  Show_Calibration_Lines = \"Fraunhofer Lines\" #@param [\"Fluorescent Light Lines\", \"Fraunhofer Lines\", \"None\"]\n  Show_RGB = True #@param [\"True\", \"False\"] {type:\"raw\"}\n\n  print('Spectral Plot Setting:\\n'\n  f'    Spectra_Plot_Style: {Spectra_Plot_Style}\\n'\n  f'            Point_Size: {Point_Size}               Line_Color:{Line_Color}   Point_Color:{Point_Color}\\n'\n  f'                X_Axis: {X_Axis}  Remove_Bias:{Remove_Bias}        Y_Axis:{Y_Axis}\\n'\n  f'Show_Calibration_Lines: {Show_Calibration_Lines}    Show_RGB:{Show_RGB}\\n')\n\n\n\nPlot a single Spectra and nearby Photo\n\n#@title Plot a Spectra File using above settings{ form-width: \"30%\" }\nif __name__ == '__main__':\n  Spectra_File_Name = \"/content/drive/MyDrive/Missions/2021-1208-HAB-Lake-Parker/2021-1208/183807/hab_spectra/2021-1208-184034-847363-spec.json\" #@param {type:\"string\"}\n  Index_Or_File = \"File\" #@param [\"Index\", \"File\"]\n  File_Index =  550#@param {type:\"integer\"}\n\n  import os\n  import pandas as pd\n  import numpy as np\n  import bokeh.io\n  from bokeh.plotting import figure, show\n  from bokeh.io import output_notebook, show\n  from bokeh.layouts import row\n\n  bokeh.io.output_notebook()\n\n  if Index_Or_File == 'Index':\n    Spectra_File_Name = spec_df['Json_spec'].iloc[File_Index]\n  else:\n    pass\n\n\n  # Create a spectra obj\n  if not 'HyperSpec' in dir():\n    print(\"Can't find the HyperSpec class.  You need to run the Cell above: 'Load all local defs.'\")\n  else:\n    if not 'Plot_Spectra_Settings' in globals():\n      print(\"You must first run the cell: 'Plot Spectra Settings'  to load the plot settings.  \")\n    else:\n      hs = HyperSpec()\n      # Use a json spectra to initialize things.\n      hs.configure_json_spectra(Spectra_File_Name)\n\n      # Calibrate the spectra for wavelength in nanometers\n      hs.calibrate_using_2_wavelengths(pixel0=73, wavelength0=430.774, pixel1=941, wavelength1=759.370 )\n\n      # Read a spectra array from a file into s\n      y = hs.read_spectra(Spectra_File_Name, \n                          remove_bias = Remove_Bias,\n                          y_average = True if Y_Axis == 'Average' else False\n                          )\n      \n      y_max = y.max()\n\n      # Setup X-Axis as pixel location or wavelength\n      if X_Axis == \"Wavelength (nm)\":\n        x = hs.wavelengths\n      else:\n        x = hs.Xpixels\n\n      TOOLS = \"pan,wheel_zoom,box_zoom,reset, save, undo, redo, hover\"\n      TOOLTIPS = [\n          (\"index\", \"$index\"),\n          (\"(x,y)\", \"($x, $y)\"),\n          (\"desc\", \"@desc\"),\n      ]\n\n      ttl = f'Spectral Flie:  {os.path.split(Spectra_File_Name)[1]}'\n      spec_fig = figure(title=ttl, \n                        x_axis_label=X_Axis, \n                        tooltips=TOOLTIPS, tools=TOOLS, \n                        y_axis_label='Relative Digital Counts', \n                        width=1000, height=400,\n                        output_backend=\"webgl\"\n                        )\n\n      spec_fig.title.text_font_size='24px'\n      spec_fig.xaxis.axis_label_text_font_size = '24pt'\n      spec_fig.xaxis.ticker.num_minor_ticks = 5\n\n      spec_fig.xaxis.ticker.desired_num_ticks = 10\n      spec_fig.xaxis.major_label_text_font_size = \"18pt\"\n\n      #hover_tool = HoverTool(tooltips=[\n      #            ('Value', '$y'),\n      #            ('Date', '@date_readable') ], renderers=[line] )\n      #self.plot.tools.append(hover_tool)\n\n      if Show_Calibration_Lines == \"Fraunhofer Lines\":\n        cal_src = hs.Fraunhofer_lines\n        cal_lbl = \"Fraunhofer Lines\"\n      elif Show_Calibration_Lines == \"Fluorescent Light Lines\":\n        cal_src = hs.HG_lines\n        cal_lbl = \"Fluorescent Light Lines\"\n\n      if Show_Calibration_Lines != 'None':\n        for frl in cal_src:\n          xc = cal_src[frl][1]\n          spec_fig.line([xc,xc],[0,y_max], legend_label=cal_lbl, line_width=2, color='LightGray')\n\n      if Spectra_Plot_Style == \"Lines\" or Spectra_Plot_Style == \"Lines & Points\":\n        spec_fig.line(x,y, legend_label=\"Down Looking Spectra\", line_width=2, color=Line_Color)\n      if Spectra_Plot_Style == \"Points\" or Spectra_Plot_Style == \"Lines & Points\":\n        spec_fig.circle(x,y, size=Point_Size, hover_color='white', hover_alpha=0.5, color=Point_Color)\n\n      show(spec_fig)\n      # Show nearby RGB image.\n      if Show_RGB == True:\n        try:\n          show_RGB_at_spec( Spectra_File_Name )\n        except:\n          print('RGB Photo not found.')"
  },
  {
    "objectID": "hab_process.html#plot-animated-spectra-and-photos-along-a-selected-flightline.",
    "href": "hab_process.html#plot-animated-spectra-and-photos-along-a-selected-flightline.",
    "title": "Colabs Online Processing for HABSpec",
    "section": "Plot Animated spectra and photos along a selected flightline.",
    "text": "Plot Animated spectra and photos along a selected flightline.\n\nAnimate Spectra from a flightline\n\n#@title Animate a flight line of spectra { form-width: \"30%\" }\n\nif __name__ == '__main__':\n  from IPython.display import clear_output\n  import os\n  #from   matplotlib import rc\n  from   matplotlib import pyplot as plt\n  import matplotlib as mpl\n  import numpy as np\n  import pandas as pd\n  import warnings\n  warnings.filterwarnings(\"ignore\")\n\n  from matplotlib.ticker import (MultipleLocator, AutoMinorLocator)\n\n  # /content/drive/MyDrive/Missions/2021-0717-HAB-pie/165347   Lots of fl.\n\n  #Spectra_File_Name = \"/content/drive/MyDrive/Missions/2021-0717-HAB-pie/161618/hab_spectra/2021-0717-161618-720442-spec.json\" #@param {type:\"string\"}\n  Flight_Line_Dir = \"/content/drive/MyDrive/Missions/2021-1208-HAB-Lake-Parker/2021-1208/190829\" #@param {type:\"string\"}\n  X_Axis = \"Wavelength (nm)\" #@param [\"Wavelength (nm)\", \"Pixels\"]\n  Plot_Fill = \"Area Fill\" #@param [\"Area Fill\", \"Line Only\"]\n\n\n  fp = Flight_Line_Dir+\"/hab_spectra/\"\n  l = os.listdir(fp)\n  spec = pd.read_json(path_or_buf =fp+ l[0])\n\n  #spec = pd.read_json(path_or_buf =Spectra_File_Name)\n  y = np.array(spec['hab_spec'].spectra) / 800.0\n  y = y - y.min()\n\n  # Setup X-Axis as pixel location or wavelength\n  x_pix = np.arange(0,y.size ) \n  w = 400 + x_pix * ((765-400)/944)\n\n  if X_Axis == \"Wavelength (nm)\":\n    x = w\n  else:\n    x = x_pix\n\n  cc = 'blue'\n  for xx in l:\n      sfn = fp+xx\n      # Show nearby RGB image.\n      if Show_RGB == True:\n        try:\n          show_RGB_at_spec( sfn )\n        except:\n          pass\n      spec = pd.read_json(path_or_buf = sfn )\n\n      y = np.array(spec['hab_spec'].spectra) / 800.0\n      y = y - y.min()\n      #plt.cla()\n      \n\n      fig = plt.figure(figsize=(15,6))\n      ax = plt.axes()\n      # 2021-0717-161618-720442-spec.json\n      ttl = xx.split(sep='-')\n      water = hs.is_water(x,y)\n      mpl.pyplot.title( f'Date:{ttl[1]}, {ttl[0]}  HMS:{ttl[-3]} utc  {water:4.4f} ', fontsize=20)\n      mpl.pyplot.ylim(0,256)\n      if X_Axis == \"Wavelength (nm)\":\n        mpl.pyplot.xlim(400,900)\n        ax.xaxis.set_major_locator(MultipleLocator(20))\n        plt.xlabel('Wavelength (nm)', fontsize=18)\n        plt.ylabel('Digital Counts', fontsize=18)\n      else:\n        mpl.pyplot.xlim(0,1280)\n        ax.xaxis.set_major_locator(MultipleLocator(50))\n        plt.xlabel('Sensor Pixel Number', fontsize=18)\n        plt.ylabel('Digital Counts', fontsize=18)\n      ax.xaxis.grid() # vertical lines\n      plt.plot(x, y, color='green', linewidth=3, label='Down Looking' )\n      if Plot_Fill == \"Area Fill\":\n        if water &lt; 4.0:\n          cc = \"blue\"\n        else:\n          cc = 'Brown'\n        plt.fill_between(x,y, alpha=.25, color=cc)\n      plt.legend()\n      plt.tight_layout()\n      clear_output(wait=True)\n      plt.pause(.2)\n  print('Completed.')\n\n\n\nPlot Signals vs time\n\n#@title Plot CHL-Fl vs Seconds Of Day { form-width: \"30%\" }\nif __name__ == '__main__':\n  from bokeh.plotting import figure, show\n  from bokeh.io import output_notebook, show\n  import bokeh\n  if __name__ == '__main__':\n    bokeh.io.output_notebook()\n    p = figure(title=\"Chl Fl\", x_axis_label=\"Seconds of the day\", y_axis_label=\"Chl Fl\", width=1000)\n    p.line(spec_df['sod'], spec_df['Chl_Fl']-10, legend_label=\"CHL Fl.\", color='Red')\n    p.line(spec_df['sod'], spec_df['fl_700'], legend_label=\"Fl 700.\", color='Blue')\n    show(p)\n\n\n\nPlot CHL_Fl as filled circles vs lat/lon\n\n#@title Plot CHL-Fl vs Lat / Lon { form-width: \"30%\" }\nif __name__ == '__main__':\n  from bokeh.plotting import figure, show\n  from bokeh.io import output_notebook, show\n  import bokeh\n  if __name__ == '__main__':\n    bokeh.io.output_notebook()\n    p = figure(title=\"Chl Fl\", x_axis_label=\"Seconds of the day\", y_axis_label=\"Chl Fl\", width=1000)\n    p.circle(spec_df['Lon'], spec_df['Lat'], legend_label=\"CHL Fl.\", color='Red', size=(spec_df['fl_700'])/6)\n    #p.circle(df['sod'], df['fl_700'], legend_label=\"Fl 700.\", color='Blue')\n    show(p)"
  },
  {
    "objectID": "hab_process.html#iterate-over-all-json-and-image-files",
    "href": "hab_process.html#iterate-over-all-json-and-image-files",
    "title": "Colabs Online Processing for HABSpec",
    "section": "Iterate over all json, and image files",
    "text": "Iterate over all json, and image files\n\n#@title Iterate over all json, and image files { form-width: \"30%\" }\nif __name__ == '__main__':\n  Root_Path = \"/content/2021-0717-HAB-pie-NO-PIX\" #@param {type:\"string\"}\n  variable_name = \"\" #@param {type:\"string\"}\n\n\n  from IPython.display import clear_output\n  import os\n  #from   matplotlib import rc\n  #from   matplotlib import pyplot as plt\n  #import matplotlib as mpl\n  import numpy as np\n  import pandas as pd\n  from pathlib import Path\n  import warnings\n  warnings.filterwarnings(\"ignore\")"
  },
  {
    "objectID": "hab_process.html#work-with-files-and-dirs",
    "href": "hab_process.html#work-with-files-and-dirs",
    "title": "Colabs Online Processing for HABSpec",
    "section": "Work with files and dirs",
    "text": "Work with files and dirs\n\n#@title Add a Colabs Title { form-width: \"30%\" }\nif __name__ == '__main__':\n  # From the mission directory, get a complete list of the flightline subdirectories.\n  print('\\nTesting hs.get_list_of_flight_lines(\\'/content/drive/MyDrive/Missions/2021-0717-HAB-pie\\')')\n  flight_line_list = hs.get_list_of_flight_lines('/content/drive/MyDrive/Missions/2021-0717-HAB-pie')\n  print(f'\\n{len(flight_line_list)} Total flightlines found.  flight_line_list[1:5]:')\n  for f in flight_line_list[1:5]:\n    print( f'  {f}' )\n\n  js = hs.get_list_of_hab_files(flight_line_list[1], subdir='hab_spectra', ext='json')\n\n  spec_images = hs.get_list_of_hab_files(flight_line_list[1], subdir='hab_images', ext='jpg')\n  print('')\n  print(f'    Spec_Images: {len(spec_images):5d}')\n\n  print(f'Json Spec Files: {len(js):5d}' )\n\n  photos = hs.get_list_of_hab_files(flight_line_list[1], subdir='hab_rgb', ext='jpg')\n  print(f'         Photos: {len(photos):5d}')\n\n  flight_lines = hs.get_list_of_flight_lines('/content/drive/MyDrive/Missions/2021-0717-HAB-pie')\n  print(f'    FlightLines: {len(flight_lines):5d}   {flight_lines[0:2]}'  )\n\n  i = 0\n  t = len(flight_lines)\n  all_specs = []\n  for fl in flight_lines:\n    # Process a single flightline\n    print(f'  Flight_line {i} of {t}: {fl}')\n    specs = hs.get_list_of_hab_files(fl, subdir='hab_spectra', ext='json')\n    all_specs.extend(specs)\n    i += 1\n    for s in specs[0:5]:\n      #print(f'  {s}')\n      pass\n  print(f'{hs.now_utc()}: Operation Completed.')"
  },
  {
    "objectID": "hab_process.html#links",
    "href": "hab_process.html#links",
    "title": "Colabs Online Processing for HABSpec",
    "section": "Links",
    "text": "Links\nReadme.md for RedTideProcessing\nDiscussion\nIssues Tracker\nRedTideProcessing Wiki"
  },
  {
    "objectID": "redtideprocessing.html",
    "href": "redtideprocessing.html",
    "title": "RedTideProcessing",
    "section": "",
    "text": "## from google.colab.patches   import cv2_imshow # for image display\nimport panel as pn\nfrom bokeh.plotting import figure, show \nfrom bokeh.io import show, output_notebook\noutput_notebook()\n\n\n    \n        \n        Loading BokehJS ...\nGps_File_Name = '/mnt/f/My Drive/Missions/2021-1208-HAB-Lake-Parker/'\\\n                '2021-1208/2021-1208-175324-910850-mission-gps.txt'\n\nmission_folder = '/mnt/s/2021-0717-HAB-Spec-Tampa-Bay-PIE/2021-0717-HAB-pie/'\n\nGps_File_Name = \"/mnt/s/2021-0717-HAB-Spec-Tampa-Bay-PIE/2021-0717-HAB-pie/2021-0717-044645-687230-mission-gps.txt\"\n\ntest_spectra_file = mission_folder+'/160206/hab_spectra/2021-0717-160401-066388-spec.json'"
  },
  {
    "objectID": "redtideprocessing.html#functions",
    "href": "redtideprocessing.html#functions",
    "title": "RedTideProcessing",
    "section": "Functions",
    "text": "Functions\n\nGeneral Purpose datetime Functions\n\ndef hhmmss_to_sod( hhmmss, Usecs=0):\n/home/wright/miniconda3/envs/dss7/lib/python3.11/site-packages/fastcore/docscrape.py:225: UserWarning: Unknown section Parameters:\n  else: warn(msg)\n/home/wright/miniconda3/envs/dss7/lib/python3.11/site-packages/fastcore/docscrape.py:225: UserWarning: Unknown section Returns:\n  else: warn(msg)\n/home/wright/miniconda3/envs/dss7/lib/python3.11/site-packages/fastcore/docscrape.py:225: UserWarning: Unknown section Description:\n  else: warn(msg)\n/home/wright/miniconda3/envs/dss7/lib/python3.11/site-packages/fastcore/docscrape.py:225: UserWarning: Unknown section Examples:\n  else: warn(msg)\n\n\n\n\nhhmmss_to_sod\n\n hhmmss_to_sod (hhmmss, Usecs=0)\n\nConverts a time string in ‘HHMMSS’ format to a seconds-of-the-day including an optional microseconds fraction.\n\ndef now_utc( fmt=‘%Y-%m%d %H:%M:%S’):\n\n\n\n\nnow_utc\n\n now_utc (fmt='%Y-%m%d %H:%M:%S')\n\nReturn the current UTC date and time as a string. Example return: ‘2021-0812 15:39:41’. See: http://shorturl.at/koOQ7 for timeformat options & directives.\n\ndef hms2sod( str, debug=False):\n\n\n\n\nhms2sod\n\n hms2sod (str, debug=False)\n\nConverts an ASCII string in the form ‘HH:MM”SS’ to seconds of the day. Works with fractional seconds.\n\nprint('\\nTesting: hms2sod( t )')\ntt = ['00:00:00',   '23:59:59', '12:00:00',\n      '00:00:00.0', '0:0:0.0', '0:0:0' ]\nprint('Time Str       Seconds of Day\\n'\\\n       '-----------------------------')\nfor t in tt:\n  rv = hms2sod( t )\n  print(f'{t:16} {rv:12.6f}')\n\n\nTesting: hms2sod( t )\nTime Str       Seconds of Day\n-----------------------------\n00:00:00             0.000000\n23:59:59         86399.000000\n12:00:00         43200.000000\n00:00:00.0           0.000000\n0:0:0.0              0.000000\n0:0:0                0.000000\n\n\n\ndef extract_hms( fn):\n\n\n\n\nextract_hms\n\n extract_hms (fn)\n\nExtract the HHMMSS and Fsecs strings from filename “fn”\n\n\nHABSpec Functions\n\n\n\nconfigure_json_spectra\n\n configure_json_spectra (f:str)\n\nConfigures HabSpec internal setting according to settings within json file ‘f’.\n\n\n\n\nType\nDetails\n\n\n\n\nf\nstr\nJson settings file.\n\n\nReturns\nstr\nReturns the Json file name.\n\n\n\n\ndef calibrate_using_2_wavelengths()\n/home/wright/miniconda3/envs/dss7/lib/python3.11/site-packages/fastcore/docscrape.py:225: UserWarning: potentially wrong underline length... \nExample: \n--------- in \nGenerate a Numpy array of calibration wavelenghts for each pixel. configure_json_spectra(f)\nmust be called beforehand inrder to set the correct number of pixels....\n  else: warn(msg)\n/home/wright/miniconda3/envs/dss7/lib/python3.11/site-packages/fastcore/docscrape.py:225: UserWarning: Unknown section Example:\n  else: warn(msg)\n/home/wright/miniconda3/envs/dss7/lib/python3.11/site-packages/fastcore/docscrape.py:225: UserWarning: Unknown section References:\n  else: warn(msg)\n\n\n\n\ncalibrate_using_2_wavelengths\n\n calibrate_using_2_wavelengths (pixel0:int=0, wavelength0:float=0,\n                                pixel1:int=0, wavelength1:float=0)\n\nGenerate a Numpy array of calibration wavelenghts for each pixel. configure_json_spectra(f) must be called beforehand inrder to set the correct number of pixels.\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\npixel0\nint\n0\npixel # for Wavelength 0\n\n\nwavelength0\nfloat\n0\nWavelength of pixel 0\n\n\npixel1\nint\n0\npixel # for Wavelength 1\n\n\nwavelength1\nfloat\n0\nWavelength for pixel1\n\n\n\n\ndef read_spectra()\n\n\n\n\nread_spectra\n\n read_spectra (f, remove_bias=True, y_average=True)\n\nReads a Json hyperspectra file.\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nf\n\n\nJSON Spectra file name\n\n\nremove_bias\nbool\nTrue\nBol remove bias\n\n\ny_average\nbool\nTrue\nAverage Y values\n\n\nReturns\nfloat\n\nNumpy array of spectral points.\n\n\n\nTest configuring, calibrating, and loading a JSON spectra file.\n\nprint(f'{dt.datetime.utcnow() }: Testing creating HyperSpectral.')\n\n# Use a json spectra to initialize things.\nprint(f'{dt.datetime.utcnow() }: Loading a json Spectra file to calibrate wavelength.')\n\nconfigure_json_spectra(test_spectra_file)\n\n# Calibrate the spectra for wavelength in nanometers\nprint(f'{dt.datetime.utcnow() }: Calibrating wavelength.')\nwavelengths = calibrate_using_2_wavelengths( \n  pixel0 =  73, wavelength0 = 430.774, \n  pixel1 = 941, wavelength1 = 759.370 )\n\nprint('\\nWavelength Calibration Data:\\n\\n'\n'                     First      Second\\n'\nf'   Wavelengths (nm): {wavelengths[73]:7.3f}      {wavelengths[941]:7.3f}\\n'\nf'     Pixel Location: {73:7.3f}      {941:7.3f}\\n')\n\n# Read a spectra array from a file into s\nprint(f'{dt.datetime.utcnow() }: Reading a spectra into \"s\"')\ns = read_spectra( test_spectra_file )\n\n# Plot the spectra vs pixel number.\n#plt.plot(s)\n\n2023-06-18 20:15:27.504516: Testing creating HyperSpectral.\n2023-06-18 20:15:27.504590: Loading json file to calibrate wavelength.\n2023-06-18 20:15:27.595740: Calibrating wavelength.\n\nWavelength Calibration Data:\n\n                     First      Second\n   Wavelengths (nm): 430.774      759.370\n     Pixel Location:  73.000      941.000\n\n2023-06-18 20:15:27.595881: Reading a spectra into \"s\"\n\n\nGenerate Fraunhofer line data suitable to plot with Bokeh.\n\n# Generate Fraunhofer plot lines for reference.\nfran_x = []; fran_y = []\ny0 = 0.0;    y1 = max(s)\nfor i in Fraunhofer_lines:\n  x = Fraunhofer_lines[i][1]\n  fran_x.append( [ x,x ] )\n  fran_y.append( [y0, y1] )\n\nGenerate a plot of the Spectra.\n\nspectra_w = figure(title=\"Spectra vs Pixel\",\n                   x_axis_label='Wavelength (nm)', y_axis_label='Intensity (Counts)',\n                  height=300, width=700)\njunk = spectra_w.multi_line(fran_x, fran_y, color='lightgray', legend_label=\"Fraunhofer Lines.\" )\njunk = spectra_w.line(wavelengths, s, legend_label=\"Temp.\", line_width=3)\nshow(spectra_w)\n\n\n  \n\n\n\n\n\n\ndef nearest_rgb_image( fn, debug=False):\n\n\n\n\nnearest_rgb_image\n\n nearest_rgb_image (fn, debug=False)\n\nReturns the path/filename to the RGB photo closes in time to fn. fn is the filename of a Json hyperspectral file.\n\nprint(\nf'    Input Json spectra file: {test_spectra_file}\\n'\nf'        Nearest RGB File is: {nearest_rgb_image( test_spectra_file )}'  \n)\n\n    Input Json spectra file: /mnt/s/2021-0717-HAB-Spec-Tampa-Bay-PIE/2021-0717-HAB-pie//160206/hab_spectra/2021-0717-160401-066388-spec.json\n        Nearest RGB File is: /mnt/s/2021-0717-HAB-Spec-Tampa-Bay-PIE/2021-0717-HAB-pie//160206/hab_rgb/2021-0717-160401-394169-rgb.jpg\n\n\n\ndef get_list_of_json_spectra( p):\n\n\n\n\nget_list_of_json_spectra\n\n get_list_of_json_spectra (p)\n\nReturns a list of Json spectra full path filenames found in subdirs under “p”.\n\ndef json_specs_to_df( specs ):\n\n\n\n\njson_specs_to_df\n\n json_specs_to_df (specs)\n\nExtracts the hhmmss and fsecs from ‘specs’ filename, converts the hhmmss and fsecs strings to float SOD.fsecs.\nParameters: specs: list A list of json spectra files.\n\ndef read_gps_file_to_df( ifn, debug=False):\n\n\n\n\nread_gps_file_to_df\n\n read_gps_file_to_df (ifn, debug=False)\n\nRead a GPS datafile into a dataframe and convert the HH:MM:SS to add an SOD column.\nTest read_gps_file_to_df() function. Read a datafile into a Pandas dataframe.\n\nGps_File_Name = '/mnt/f/My Drive/Missions/2021-1208-HAB-Lake-Parker/2021-1208/2021-1208-175324-910850-mission-gps.txt'\ngps_df = read_gps_file_to_df(Gps_File_Name, debug=False)\ndisplay(gps_df)\n\n\n\n\n\n\n\n\nDate\nHMS\nLat\nLon\nElev\nSpeed\nNsat\nMode\nHerr\nVerr\nTemp\nSOD\nCourse\n\n\n\n\n0\n2021-12-08\n17:53:28\n28.076396\n-81.945634\n47.2\n0.0\n5\n3\n15.3\n48.3\n48.312\n64408.0\n41.571424\n\n\n1\n2021-12-08\n17:53:29\n28.076397\n-81.945633\n46.8\n0.0\n5\n3\n15.3\n48.3\n49.388\n64409.0\n85.100100\n\n\n2\n2021-12-08\n17:53:30.100000\n28.076397\n-81.945629\n47.4\n0.0\n5\n3\n15.3\n48.3\n47.774\n64410.1\n16.314411\n\n\n3\n2021-12-08\n17:53:31.100000\n28.076398\n-81.945628\n47.0\n0.0\n5\n3\n15.3\n48.3\n48.312\n64411.1\n90.000000\n\n\n4\n2021-12-08\n17:53:32.100000\n28.076398\n-81.945628\n46.4\n0.0\n5\n3\n15.3\n48.3\n49.388\n64412.1\n-47.694117\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n96\n2021-12-08\n17:55:06\n28.076422\n-81.945623\n40.1\n0.0\n6\n3\n12.3\n47.8\n53.692\n64506.0\n-5.572397\n\n\n97\n2021-12-08\n17:55:07\n28.076425\n-81.945624\n39.9\n0.0\n6\n3\n12.3\n47.8\n54.230\n64507.0\n26.580205\n\n\n98\n2021-12-08\n17:55:08\n28.076427\n-81.945623\n39.8\n0.0\n6\n3\n12.3\n47.8\n53.692\n64508.0\n10.059057\n\n\n99\n2021-12-08\n17:55:09.100000\n28.076432\n-81.945622\n39.8\n0.0\n6\n3\n12.3\n47.8\n54.768\n64509.1\n27.627306\n\n\n100\n2021-12-08\n17:55:10.100000\n28.076435\n-81.945621\n39.7\n0.0\n6\n3\n12.3\n47.8\n54.768\n64510.1\n0.000000\n\n\n\n\n101 rows × 13 columns\n\n\n\n\ndef compute_gps_positions( gps, spec_df, debug=False):\nSee: https://numpy.org/doc/stable/reference/generated/numpy.interp.html\n\n\n\n\ncompute_gps_positions\n\n compute_gps_positions (gps, spec_df, debug=False)\n\nInterpolates spectra positions from gps.\n\ndef get_bearing( lat1=0, lat2=0, long1=0, long2=0, debug=False):\n\n\n\n\nget_bearing\n\n get_bearing (lat1=0, lat2=0, long1=0, long2=0, debug=False)\n\nComutes and returns the bearing between two lat/lon pairs. See: http://shorturl.at/atGHN\n\n# Test get_bearing()\nlst = [ [30,29, -75, -75],\n        [29,30, -75, -75],\n        [30,30, -76, -75],\n        [30,30, -75, -76] ]\nprint('\\nTesting get_bearing()')\nfor t in lst:\n  v = get_bearing( lat1=t[0], lat2=t[1], long1=t[2], long2=t[3] )\n  print( f'  {t}, {v:6.2f}')\n\n\nTesting get_bearing()\n  [30, 29, -75, -75], 180.00\n  [29, 30, -75, -75],   0.00\n  [30, 30, -76, -75],  89.75\n  [30, 30, -75, -76], -89.75\n\n\n\ndef w_range_pixels( x,a,b, debug=False):\n\n\n\n\nw_range_pixels\n\n w_range_pixels (x, a, b, debug=False)\n\nReturns a pixel index list of all pixels between wavelength ‘a’ and ‘b’. Parameters: x A numpy array of wavlengths for each pixel a Starting wavelength b Ending wavelength\nReturns: A list of index values from wavelength ‘a’ to ‘b’\n\ndef get_fluorescence( x, y, fl_start=0, fl_stop=0, base_start=0, base_stop=0, debug=False ):\n\n\n\n\nget_fluorescence\n\n get_fluorescence (x, y, fl_start=0, fl_stop=0, base_start=0, base_stop=0,\n                   debug=False)\n\n\ndef get_fluorescence_700( x, y):\n\n\n\n\nget_fluorescence_700\n\n get_fluorescence_700 (x, y)\n\nReturns the fluorescence value at 700nm.\n\ndef get_fluorescence_683( x, y):\n\n\n\n\nget_fluorescence_683\n\n get_fluorescence_683 (x, y)\n\nReturns the fluorescence value at 683nm. 683nm is Chlorophyll\n\ndef is_water( x,y, debug=False):\n\n\n\n\nis_water\n\n is_water (x, y, debug=False)\n\nReturns the mean signal value between 840nm and 860nm wavelengths. Since water absorbs IR.\nInputs: x A numpy array of wavlengths for each pixel y A numpy array of intensity values at each wavelength. x and y mus be the same size.\nReturns: The mean signal value between 840nm and 860nm. The signal level is not currently normalized for anything, exposure, etc. Threshold is around 4.0. Above 4, land or glint.\nReferences: Application of the water-related spectral reflectance indices: A review https://www.sciencedirect.com/science/article/abs/pii/S1470160X18308215\n\ndef get_list_of_flight_lines( p, debug=False):\n\n\n\n\nget_list_of_flight_lines\n\n get_list_of_flight_lines (p, debug=False)\n\nReturns a list of flightline subdirs on path p.\nTest get_list_of_flight_lines().\n\nprint('\\nTesting: get_list_of_flight_lines(p)')\ntest_path_list = get_list_of_flight_lines( mission_folder )\ndisplay(test_path_list[0:5])\n\n\nTesting: get_list_of_flight_lines(p)\n\n\n['/mnt/s/2021-0717-HAB-Spec-Tampa-Bay-PIE/2021-0717-HAB-pie/141625',\n '/mnt/s/2021-0717-HAB-Spec-Tampa-Bay-PIE/2021-0717-HAB-pie/142250',\n '/mnt/s/2021-0717-HAB-Spec-Tampa-Bay-PIE/2021-0717-HAB-pie/143534',\n '/mnt/s/2021-0717-HAB-Spec-Tampa-Bay-PIE/2021-0717-HAB-pie/144030',\n '/mnt/s/2021-0717-HAB-Spec-Tampa-Bay-PIE/2021-0717-HAB-pie/144505']\n\n\n\ndef get_list_of_hab_files( p, subdir=’‘, ext=’’, debug=False):\n\n\n\n\nget_list_of_hab_files\n\n get_list_of_hab_files (p, subdir='', ext='', debug=False)\n\nReturns a list of hab files in p/subdir with the specified file extension.\nParameters: p : str subdir : str Default = ’’ ext : str Default = ’’\nTest get_list_of_hab_files().\n\n#mission_folder = '/mnt/s/2021-0717-HAB-Spec-Tampa-Bay-PIE/2021-0717-HAB-pie/'\nprint('\\nTesting: get_list_of_hab_files()')\nflight_line_list = get_list_of_flight_lines(mission_folder)\nrv_get_list_of_hab_files = get_list_of_hab_files( flight_line_list[1], subdir='hab_spectra', ext='json')\ndisplay(rv_get_list_of_hab_files[0:5])\n\n\nTesting: get_list_of_hab_files()\n\n\n['/mnt/s/2021-0717-HAB-Spec-Tampa-Bay-PIE/2021-0717-HAB-pie/142250/hab_spectra/2021-0717-142251-046414-spec.json',\n '/mnt/s/2021-0717-HAB-Spec-Tampa-Bay-PIE/2021-0717-HAB-pie/142250/hab_spectra/2021-0717-142251-761101-spec.json',\n '/mnt/s/2021-0717-HAB-Spec-Tampa-Bay-PIE/2021-0717-HAB-pie/142250/hab_spectra/2021-0717-142252-464391-spec.json',\n '/mnt/s/2021-0717-HAB-Spec-Tampa-Bay-PIE/2021-0717-HAB-pie/142250/hab_spectra/2021-0717-142253-154079-spec.json',\n '/mnt/s/2021-0717-HAB-Spec-Tampa-Bay-PIE/2021-0717-HAB-pie/142250/hab_spectra/2021-0717-142300-757855-spec.json']\n\n\n\nif __name__ == '__main__':\n  #ths = HyperSpec()\n  print(f'{now_utc()}: HyperSpectral functions loaded.')\n\n2023-0618 13:49:24: HyperSpectral functions loaded."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "RedTideProcessing",
    "section": "",
    "text": "This file will become your README and also the index of your documentation."
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "RedTideProcessing",
    "section": "Install",
    "text": "Install\npip install RedTideProcessing"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "RedTideProcessing",
    "section": "How to use",
    "text": "How to use\nFill me in please! Don’t forget code examples:\n\n1+1\n\n2"
  },
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "core",
    "section": "",
    "text": "foo\n\n foo ()"
  }
]